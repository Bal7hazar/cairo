//! > Match with dup

//! > test_function_name
test_function_generator

//! > function
fn foo(a: felt) {
    let (x, y) = if a == 0 {
        (a, a)
    } else {
        (a, a)
    };
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label0:
dup<felt>([0]) -> ([0], [1])
felt_jump_nz([1]) { fallthrough() label1([2]) }
branch_align() -> ()
dup<felt>([0]) -> ([0], [10])
struct_construct<Tuple<felt, felt>>([0], [10]) -> ([3])
store_temp<Tuple<felt, felt>>([3]) -> ([3])
rename<Tuple<felt, felt>>([3]) -> ([4])
jump() { label2() }
label1:
branch_align() -> ()
drop<NonZero<felt>>([2]) -> ()
dup<felt>([0]) -> ([0], [11])
struct_construct<Tuple<felt, felt>>([0], [11]) -> ([5])
store_temp<Tuple<felt, felt>>([5]) -> ([5])
rename<Tuple<felt, felt>>([5]) -> ([4])
label2:
struct_deconstruct<Tuple<felt, felt>>([4]) -> ([6], [7])
drop<felt>([6]) -> ()
drop<felt>([7]) -> ()
struct_construct<Unit>() -> ([8])
store_temp<Unit>([8]) -> ([8])
rename<Unit>([8]) -> ([9])
return([9])
