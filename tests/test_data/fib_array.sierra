type [0] = felt;
type [1] = Array<[0]>;
type [2] = NonZero<[0]>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc felt_const<1> = felt_const<1>;
libfunc array_new<[0]> = array_new<[0]>;
libfunc store_temp<[0]> = store_temp<[0]>;
libfunc store_temp<[1]> = store_temp<[1]>;
libfunc rename<[1]> = rename<[1]>;
libfunc function_call<user@[0]> = function_call<user@[0]>;
libfunc dup<[0]> = dup<[0]>;
libfunc felt_jump_nz = felt_jump_nz;
libfunc drop<[0]> = drop<[0]>;
libfunc jump = jump;
libfunc drop<[2]> = drop<[2]>;
libfunc array_append<[0]> = array_append<[0]>;
libfunc felt_add = felt_add;
libfunc felt_sub = felt_sub;
libfunc rename<[0]> = rename<[0]>;

revoke_ap_tracking() -> ();
felt_const<1>() -> ([1]);
felt_const<1>() -> ([2]);
array_new<[0]>() -> ([3]);
store_temp<[0]>([1]) -> ([5]);
store_temp<[0]>([2]) -> ([6]);
store_temp<[0]>([0]) -> ([7]);
store_temp<[1]>([3]) -> ([3]);
rename<[1]>([3]) -> ([8]);
function_call<user@[0]>([5], [6], [7], [8]) -> ([4]);
rename<[1]>([4]) -> ([9]);
return([9]);
revoke_ap_tracking() -> ();
dup<[0]>([2]) -> ([2], [17]);
felt_jump_nz([17]) { fallthrough() 20([4]) };
drop<[0]>([0]) -> ();
drop<[0]>([1]) -> ();
drop<[0]>([2]) -> ();
store_temp<[1]>([3]) -> ([5]);
jump() { 37() };
drop<[2]>([4]) -> ();
dup<[0]>([0]) -> ([0], [18]);
array_append<[0]>([3], [18]) -> ([6]);
dup<[0]>([1]) -> ([1], [19]);
felt_add([0], [19]) -> ([7]);
felt_const<1>() -> ([8]);
felt_sub([2], [8]) -> ([9]);
store_temp<[0]>([1]) -> ([11]);
store_temp<[0]>([7]) -> ([7]);
rename<[0]>([7]) -> ([12]);
store_temp<[0]>([9]) -> ([9]);
rename<[0]>([9]) -> ([13]);
store_temp<[1]>([6]) -> ([6]);
rename<[1]>([6]) -> ([14]);
function_call<user@[0]>([11], [12], [13], [14]) -> ([10]);
rename<[1]>([10]) -> ([15]);
rename<[1]>([15]) -> ([5]);
rename<[1]>([5]) -> ([16]);
return([16]);

[1]@0([0]: [0]) -> ([1]);
[0]@12([0]: [0], [1]: [0], [2]: [0], [3]: [1]) -> ([1]);
